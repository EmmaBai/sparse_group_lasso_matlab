H1
dim(H1)
Khalf1<-U1%*%pracma::sqrtm(diag(n-n/K)-H1)$B%*%t(U1)  # sq
dim(Khalf1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X, Y, Lambda1, Lambda2, 10)
pracma::sqrtm(diag(n-n/K)-H1)$B
diag(n-n/K)-H1
M1
MASS::ginv(t(M1)%*%M1+(n-n/K)*Lambda2[l]*diag(p))
A=MASS::ginv(t(M1)%*%M1+(n-n/K)*Lambda2[l]*diag(p))
A[1,1]
A[1,2]
A[2,2]
A=t(M1)%*%M1+(n-n/K)*Lambda2[l]*diag(p)
A
diag(a)
diag(A)
a=LavaLoop(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoop(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
a$Y1
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
k = 9
from = (k)*n/K+1-1
to   = (k+1)*n/K-1
from
to
to+1
from-1
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
Y1`
}
Y1
a$Y1
a$Y1-Y1
k
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
all.equal(a$Y1,Y1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$Y1,Y1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Y1
all.equal(a$Y1,Y1)
k=1
n <- length(Y)
p <- length(X[1,])
S=t(X)%*%X/n
temp_svd<-svd(X,nu=n,nv=p)
U<-temp_svd$u; M<-diag(temp_svd$d,n,p); V<-temp_svd$v
elava_array<-array(dim=c(K,length(Lambda1),length(Lambda2)))
elavapost<-array(dim=c(K,length(Lambda1),length(Lambda2)))
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
X1<-X[-c(((k-1)*n/K+1):(k*n/K)),]
S1<-t(X1)%*%X1/(n-n/K)
X1_svd<-svd(X1,nu=nrow(X1),nv=ncol(X1))
U1<-X1_svd$u; M1<-diag(X1_svd$d,nrow(X1),ncol(X1)); V1<-X1_svd$v
# validation data n/K
vY<-as.matrix(Y[((k-1)*n/K+1):((k-1)*n/K+n/K),1])
vX<-X[((k-1)*n/K+1):((k-1)*n/K+n/K),]
all.equal(a$Y1,Y1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$vX,vX)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$X1,X1)
a$X1
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$vX,vX)
a$vX,vX
a$vX
vX
dim(a$vX)
dim(vX)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$vX,vX)
dim(a$vX)
dim(vX)
a$vX-vX
all.equal(a$vY,vY)
k
k=2
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
X1<-X[-c(((k-1)*n/K+1):(k*n/K)),]
S1<-t(X1)%*%X1/(n-n/K)
X1_svd<-svd(X1,nu=nrow(X1),nv=ncol(X1))
U1<-X1_svd$u; M1<-diag(X1_svd$d,nrow(X1),ncol(X1)); V1<-X1_svd$v
# validation data n/K
vY<-as.matrix(Y[((k-1)*n/K+1):((k-1)*n/K+n/K),1])
vX<-X[((k-1)*n/K+1):((k-1)*n/K+n/K),]
all.equal(a$vY,vY)
all.equal(a$vX,vX)
all.equal(a$X1,X1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
s1
# training data: size n-n/K
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
X1<-X[-c(((k-1)*n/K+1):(k*n/K)),]
S1<-t(X1)%*%X1/(n-n/K)
X1_svd<-svd(X1,nu=nrow(X1),nv=ncol(X1))
U1<-X1_svd$u; M1<-diag(X1_svd$d,nrow(X1),ncol(X1)); V1<-X1_svd$v
# validation data n/K
vY<-as.matrix(Y[((k-1)*n/K+1):((k-1)*n/K+n/K),1])
vX<-X[((k-1)*n/K+1):((k-1)*n/K+n/K),]
s1
U1
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$M1
all.equal(a$M1,M1)
all.equal(a$U1,U1)
all.equal(a$V1,V1)
k
k=1
# training data: size n-n/K
Y1<-as.matrix(Y[-c(((k-1)*n/K+1):(k*n/K)),1])
X1<-X[-c(((k-1)*n/K+1):(k*n/K)),]
S1<-t(X1)%*%X1/(n-n/K)
X1_svd<-svd(X1,nu=nrow(X1),nv=ncol(X1))
U1<-X1_svd$u; M1<-diag(X1_svd$d,nrow(X1),ncol(X1)); V1<-X1_svd$v
# validation data n/K
vY<-as.matrix(Y[((k-1)*n/K+1):((k-1)*n/K+n/K),1])
vX<-X[((k-1)*n/K+1):((k-1)*n/K+n/K),]
all.equal(a$U1,U1)
all.equal(a$M1,M1)
all.equal(a$V1,V1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
l=1
k
H1<-M1%*%MASS::ginv(t(M1)%*%M1+(n-n/K)*Lambda2[l]*diag(p))%*%t(M1)
all.equal(a$M1,M1)
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
all.equal(a$H1,H1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
a$Khalf1
dim(a$Khalf1)
Khalf1<-U1%*%pracma::sqrtm(diag(n-n/K)-H1)$B%*%t(U1)  # square root of (I-the ridge-projected matrix), which is square root of \tilde K in the paper's notation
all.equal(a$Khalf1,Khalf1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
a=LavaLoopTest(X, Y, Lambda1, Lambda2, 10)
tY1=Khalf1%*%Y1; tX1=Khalf1%*%X1; # these are
all.equal(a$tX1,tY1)
all.equal(a$tY1,tY1)
all.equal(a$tX1,tX1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
X
all.equal(crossprod(X), t(X)%*%X)
all.equal(crossprod(X,Y), t(X)%*%Y)
diag(1, p)
dim(diag(1, p))
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
LassoShooting2(X,Y,Lambda1)
LassoShooting2(X,Y,Lambda1[1])
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
LassoShooting2(X,Y,Lambda1[1])
all.equal(crossprod(X),LassoShooting2(X,Y,Lambda1[1]))
LassoShooting2(X,Y,Lambda1[1])
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
LassoShooting2(X,Y,Lambda1[1])
repmat(Lambda1)
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
Rcpp::sourceCpp('GitHub/SparseDenseMidas/lavamidas/Lavash.cpp')
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
#setwd("/Users/striaukas/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
writeMat(y.filename, y = y)
writeMat(X.filename, X = X)
writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
setwd("/Users/striaukas/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
#setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
writeMat(y.filename, y = y)
writeMat(X.filename, X = X)
writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
#setwd("/Users/striaukas/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
writeMat(y.filename, y = y)
writeMat(X.filename, X = X)
writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
#setwd("/Users/striaukas/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
writeMat(y.filename, y = y)
writeMat(X.filename, X = X)
writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
#setwd("/Users/striaukas/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/nlapprox")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
#writeMat(y.filename, y = y)
#writeMat(X.filename, X = X)
#writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
Fit$beta
X <- data$x
means <- apply(X, 2, mean)
X <- t(t(X) - means)
var <- apply(X, 2, function(x) (sqrt(sum(x^2))))
X <- t(t(X)/var)
data$x <- X
X.transform <- list(X.scale = var, X.means = means)
intercept <- mean(data$y)
data$y <- data$y - intercept
Sol <- oneDim(data, index, thresh, inner.iter = maxit,
outer.iter = maxit, outer.thresh = thresh, min.frac = min.frac,
nlam = nlam, lambdas = lambdas, gamma = gamma, verbose = verbose,
step = step, reset = reset, alpha = alpha)
inner.iter = 100
outer.iter = 100
outer.thresh = 0.0001
gamma = 0.8
step = 1
reset = 10
alpha = 0.95
min.frac = 0.05
verbose = FALSE
X <- data$x
y <- data$y
n <- nrow(X)
p <- ncol(X)
## Setting up group lasso stuff ##
ord <- order(index)
index <- index[ord]
X <- X[,ord]
unOrd <- match(1:length(ord),ord)
## Coming up with other C++ info ##
groups <- unique(index)
num.groups <- length(groups)
range.group.ind <- rep(0,(num.groups+1))
for(i in 1:num.groups){
range.group.ind[i] <- min(which(index == groups[i])) - 1
}
range.group.ind[num.groups+1] <- ncol(X)
group.length <- diff(range.group.ind)
## DONE SETTING UP C STUFF ##
#alpha <- sqrt(2*log(p))/(1+sqrt(2*log(num.groups)/min(group.length)) + sqrt(2*log(p)))
nlam = length(lambdas)
beta.old <- rep(0,ncol(X))
beta.is.zero <- rep(1,num.groups)
beta <- array(0, c(ncol(X),nlam))
eta <- rep(0,n)
k=1
beta.is.zero <- rep(1, num.groups)
beta.old <- rep(0, ncol(X))
eta <- rep(0,n)
junk <- .C("linNest", X = as.double(as.vector(X)), y = as.double(y), index = as.integer(index),
nrow = as.integer(nrow(X)), ncol = as.integer(ncol(X)),
numGroup = as.integer(num.groups), rangeGroupInd = as.integer(range.group.ind),
groupLen = as.integer(group.length),
lambda1 = as.double(lambdas[k]*alpha), lambda2 = as.double(lambdas[k]*(1-alpha)),
beta = as.double(beta.old),
innerIter = as.integer(inner.iter), outerIter = as.integer(outer.iter),
thresh = as.double(thresh), outerThresh = as.double(outer.thresh),
eta = as.double(eta), gamma = as.double(gamma), betaIsZero = as.integer(beta.is.zero),
step = as.double(step), reset = as.integer(reset))
junk$rangeGroupInd
rm(list = ls())
#install.packages("SGL")
#install.packages("R.matlab")
require("SGL")
require("R.matlab")
setwd("C:/Users/Z440/Documents/GitHub/midas_lasso_shapre_rest/code_check")
set.seed(123)
n = 50; p = 10; size.groups = 3
index <- ceiling(1:p / size.groups)
X = matrix(rnorm(n * p), ncol = p, nrow = n)
beta = (-2:2)*10
y = X[,1:5] %*% beta + 0.1*rnorm(n)
#_________ SAVING DATA TO MATLAB FORMAT _____________#
y.filename <- paste("y", ".mat", sep = "")
X.filename <- paste("X", ".mat", sep = "")
idx.filename <- paste("index", ".mat", sep = "")
#writeMat(y.filename, y = y)
#writeMat(X.filename, X = X)
#writeMat(idx.filename, index = index)
#____________________________________________________#
#_________ DATA AND PARAMETERS _____________#
data = list(x = X, y = y)
maxit = 1000
thresh = 0.001
min.frac = 0.1
nlam = 20
gamma = 0.8
standardize = TRUE
verbose = FALSE
step = 1
reset = 10
alpha = 0.95
lambdas = c(0, 1, 2, 3)
type = "linear"
Fit = SGL(data, index, type = "linear", lambdas = lambdas, standardize = FALSE)
Fit$beta
